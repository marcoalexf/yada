import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '../../app/store';
import { fetchNews } from './newsAPI';
import { parseRss } from '../../utils'

export interface NewsState {
  news: any[];
  status: 'idle' | 'loading' | 'failed';
  readLater: any[];
}

const initialState: NewsState = {
  news: [],
  status: 'idle',
  readLater: [],
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const fetchRssNews = createAsyncThunk(
  'news/fetchNews',
  async () => {
    return await fetchNews();
  }
);

export const newsSlice = createSlice({
  name: 'news',
  initialState,
  reducers: {
    addReadLater: (state, action) => {
      state.readLater.push(action.payload);
    },
    removeReadLater: (state, action) => {
      const indexToRemove = state.readLater.findIndex(action.payload);
      state.readLater.splice(indexToRemove, 1);
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchRssNews.pending, (state) => {
        state.status = 'loading'
      })
      .addCase(fetchRssNews.fulfilled, (state, action) => {
        state.status = 'idle';
        state.news = parseRss(action.payload.items)
      });
  },
});

export const { addReadLater, removeReadLater } = newsSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const getNews = (state: RootState) => state.news.news;


export default newsSlice.reducer;
